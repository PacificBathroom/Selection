// netlify/functions/scrape.ts
import type { Handler } from '@netlify/functions';
import * as cheerio from 'cheerio';

const isProductUrl = (href?: string) =>
  !!href && /^https?:\/\/(www\.)?precero\.com\.au\/product\/[^/?#]+\/?$/i.test(href);

function clean(t?: string) {
  return (t || '').replace(/\s+/g, ' ').trim();
}

export const handler: Handler = async (event) => {
  try {
    const url = event.queryStringParameters?.url || '';
    if (!isProductUrl(url)) {
      return { statusCode: 400, body: JSON.stringify({ error: 'Provide a valid Precero product URL' }) } as any;
    }

    const resp = await fetch(url, { headers: { 'user-agent': 'Mozilla/5.0' } });
    if (!resp.ok) return { statusCode: 500, body: JSON.stringify({ error: 'fetch failed' }) } as any;
    const html = await resp.text();
    const $ = cheerio.load(html);

    const name =
      clean($('h1.product_title').text()) ||
      $('meta[property="og:title"]').attr('content') ||
      clean($('title').text());

    const code =
      clean($('.sku').text()) ||
      clean($('span:contains("SKU")').next().text()) ||
      undefined;

    const price =
      clean($('.price .amount').first().text()) || undefined;

    const description =
      clean($('.woocommerce-product-details__short-description').text()) ||
      clean($('#tab-description').text()) ||
      clean($('meta[name="description"]').attr('content')) ||
      undefined;

    // Images
    const gallery: string[] = [];
    $('figure.woocommerce-product-gallery__image img').each((_, img) => {
      const src = $(img).attr('data-src') || $(img).attr('src');
      if (src) gallery.push(src);
    });
    const ogImg = $('meta[property="og:image"]').attr('content') || $('img.wp-post-image').attr('src');
    const image = ogImg || gallery[0];

    // Features: bullet lists near description
    const features: string[] = [];
    $('.woocommerce-product-details__short-description ul li, #tab-description ul li').each((_, li) => {
      const t = clean($(li).text());
      if (t) features.push(t);
    });

    // Specs table: look for tables with two columns
    type Spec = { label: string; value: string };
    const specs: Spec[] = [];
    $('table').each((_, table) => {
      const headers = $(table).find('th').length;
      const rows = $(table).find('tr').length;
      if (rows && headers <= 2) {
        $(table).find('tr').each((__, tr) => {
          const label = clean($(tr).find('th, td').first().text());
          const value = clean($(tr).find('td').last().text());
          if (label && value && label.toLowerCase() !== value.toLowerCase()) {
            specs.push({ label, value });
          }
        });
      }
    });

    const assets: { label: string; href: string }[] = [];
    $('a[href$=".pdf"], a[href$=".doc"], a[href$=".docx"]').each((_, a) => {
      const href = $(a).attr('href') || '';
      const label = clean($(a).text()) || href.split('/').pop() || 'Download';
      if (href) assets.push({ label, href });
    });

    const payload = {
      id: code || name || url,
      sourceUrl: url,
      name,
      code,
      price,
      description,
      image,
      gallery,
      features,
      specs,
      assets
    };

    return { statusCode: 200, body: JSON.stringify(payload) } as any;
  } catch (err: any) {
    return { statusCode: 500, body: JSON.stringify({ error: err?.message || 'scrape failed' }) } as any;
  }
};
